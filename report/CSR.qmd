---
title: "CSR"
author: "Pavel"
format: html
editor: visual
---

```{r}
#| include: false
# styler:::style_active_file()
library(tidyverse)
library(kableExtra)
library(knitr)
source("../R/constants.R")
source("../R/plots.R")
```

## CSR (Casino Strategies Report)

![–ú–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞](pics/ocean.jpeg){fig-align="center" width="300"}

## What is this about

1.  Code. **Functional** code and **tidyverse style** where is possible. A bit of OOP with R6 classes.
2.  Game simulation and **data wrangling**.
3.  Creating different gaming strategies using common sense and **statistics**.
4.  Finding best strategy by Monte Carlo simulation and Law of Large Numbers.
5.  **Data Visualization** of metrics by different strategies using **ggplot2**.
6.  **Results presentations** with Quarto.
7.  Project management using **git, GitHub, renv**.

## Casino Rules

1.  –í—Å–µ–≥–æ `r n_bandits` –∞–≤—Ç–æ–º–∞—Ç–æ–≤.
2.  –ò–∑ –Ω–∏—Ö `r n_bandits-1` –∞–≤—Ç–æ–º–∞—Ç–æ–≤ –∏–º–µ—é—Ç –º–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –Ω–∏–∂–µ —Ü–µ–Ω—ã –∏–≥—Ä—ã.
3.  –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é –ø—Ä–∏–±—ã–ª—å –∏–≥—Ä–æ–∫—É –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ.
4.  –ù–æ –ø–æ–±–µ–¥–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ `r n_games_change_p` –∏–≥—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–±—å—é–∑–∞ –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

## Basic statistics

```{r}
#| include: false
exp_losing <- sum(losing_p_distr * winning_sizes)
exp_winning <- sum(winning_p_distr * winning_sizes)
p_losing <- (n_bandits - 1) / n_bandits
p_winning <- 1 / n_bandits
avg_win <- p_losing * exp_losing + p_winning * exp_winning
```

-   –í—Å–µ–≥–æ –º–∞—à–∏–Ω: `r n_bandits`.
-   –¶–µ–Ω–∞ –∏–≥—Ä—ã: **`r price`** –¥–µ–Ω–µ–≥.
-   –£ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö –º–∞—à–∏–Ω –º–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ `r exp_losing |> round(2)`.
-   –£ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –º–∞—à–∏–Ω—ã –º–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ `r exp_winning |> round(2)`.
-   –ü—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞: `r avg_win |> round(2)`.
-   –ú–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±—É–¥–µ–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∏–º—É–ª—è—Ü–∏–∏.
-   –í –æ–¥–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ `r n_steps` –∏–≥—Ä.
-   –î–ª—è –æ—Ü–µ–Ω–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ `r n_iters` –∏—Ç–µ—Ä–∞—Ü–∏–π.

### –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

-   –ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–π
-   T-test –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ
-   Test $\chi^2$ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
-   Z-test –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏

## Strategies

1.  Randy ü§™
    1.  Randomly pulls machine at every moment
2.  Hate-to-lose man üòé
    1.  Has 10 patience points.
    2.  Every lose costs 1-2 patience points.
    3.  Win restores patience points.
    4.  If patience is depleted player jumps to another random machine.
3.  T-man üçµ
    1.  Builds for every machine confidence interval of expected value using T-test
    2.  At every step chooses a random machine with weights - lower boundary of CI.
    3.  Keeps last 50 games for every machine, so he will adapt to change of winning machine.
4.  Conservative player üß±
    1.  Collects winning history from every machine.
    2.  Finds proportion of every event and takes lower boundary using Z test for proportions.
    3.  Plays a machine until its adjusted expected value is less than 7.
5.  Son of a casino designer ü§°
    1.  Knows true distributions of winning and losing machines.
    2.  Plays at least 10 times at every machine. Keep history of 100 games.
    3.  Uses $\chi^2$ test for comparing current distribution of machine to the know distributions.
    4.  Plays in a particular machine, until the machine is likely to be losing. Then moves to the next one on the right.

–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à

```{r}
#| echo: false
tibble(winning_sizes, w = winning_p_distr, l = losing_p_distr) |>
  mutate(one_in_w = round(1 / w)) |>
  mutate(one_in_l = round(1 / l)) |>
  mutate(w = scales:::percent(w, accuracy = .1)) |>
  mutate(l = scales:::percent(l, accuracy = .1)) |>
  select(winning_sizes, w, one_in_w, l, one_in_l) |>
  rename(`–†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã` = winning_sizes) |>
  kable(format = "html", align = "c") |>
  kable_styling(full_width = FALSE, bootstrap_options = "striped") |>
  column_spec(3, border_right = T) |> 
  column_spec(1, border_right = T) 
```

## Visualization of strategies

```{r, fig.asp=0.5, fig.width=8}
#| echo: false
plot_left_on_step(rewards_at_step)
```

And two more plots on machine choice

## Best strategy

–ú–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –æ—Ç –∏–≥—Ä—ã
```{r}
#| echo: false
profit_ci |>
  mutate_strategy() |>
  arrange(-mean) |>
  mutate(across(c(mean, lb, hb), ~ round(., 3))) |> 
  mutate(
    string = str_c(
      mean,
      " [", lb,
      "; ", hb,
      "]"
      )
    ) |>
  select(strategy, mean, lb, hb, string) |> 
  kable(format = "html", align = "c")
```


```{r, fig.asp=0.3, fig.width=8}
#| echo: false
plot_expected_profit(profit_ci)
```

## Conclusions

```{r cnt functions from bash}
#| include: false
cnt_function <- system("git grep -E 'function' ../R | wc -l", intern = T) |>
  as.integer()
```

1.  You will never win in a real casino
2.  Statistics is useful
3.  Simulations are fun and cheap
4.  Write as many functions as possible. I have `r cnt_function`, actually.
