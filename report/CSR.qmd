---
title: "CSR"
author: "Pavel"
format: html
theme: journal
editor: visual
---

```{r}
#| include: false
# styler:::style_active_file()
library(tidyverse)
library(kableExtra)
library(knitr)
source("../R/constants.R")
source("../R/plots.R")
```

## Casino Strategies Report

This project presents simulation of casino machines (slot machines).\
We create strategies to play maximizing profit and evaluate their efficiency.

![Is it...](pics/ocean.jpeg){fig-align="left" width="300"}

## Practiced skills

-   R programming. **Functional** code and **tidyverse style** where is possible. A bit of **OOP** with R6 classes. Code quality is a topic of discussion, though.
-   Game simulation and **data wrangling**.
-   Creating different gaming strategies using common sense and **statistics**.
-   Finding best strategy by Monte Carlo simulation and Law of Large Numbers.
-   **Data Visualization** of metrics by different strategies using **ggplot2**.
-   **Results presentations with Quarto**.
-   Project management using **git, GitHub, renv**.

## Casino Rules

-   There are `r n_bandits` machines.
-   `r n_bandits-1` machines have expected profit lower than price.
-   Only one machine has expected profit higher than price.
-   Winning machine might be changed after `r n_games_change_p` games to prevent exploit.

## Basic statistics

```{r}
#| include: false
exp_losing <- sum(losing_p_distr * winning_sizes)
exp_winning <- sum(winning_p_distr * winning_sizes)
p_losing <- (n_bandits - 1) / n_bandits
p_winning <- 1 / n_bandits
avg_win <- p_losing * exp_losing + p_winning * exp_winning
```

-   Game price: `r price`.
-   Expected profit of losing machine: `r exp_losing |> round(2)`.
-   Expected profit of winning machine: `r exp_winning |> round(2)`.
-   Average expected profit (random strategy): `r avg_win |> round(2)`.
-   Other expected profits will be found using Monte Carlo.
-   There are `r n_steps` games in one iteration.
-   Every strategy is sampled with `r n_iters` iterations.

### Statistics involved

-   Monte Carlo method for simulation
-   $\mathbb{t}$-test to estimate the confidence interval of a mean
-   $\chi^2$ test to estimate difference between two categorical variables
-   $\mathbb{Z}$ test to estimate the confidence interval of a proportion

## Strategies

-   Randy 🤪
    -   Randomly pulls machine at every moment
-   Hate-to-lose man 😎
    -   Has 10 patience points.
    -   Every lose costs 1-2 patience points.
    -   Win restores patience points.
    -   If patience is depleted player jumps to another random machine.
-   T-man 🍵
    -   Builds for every machine confidence interval of expected value using T-test
    -   At every step chooses a random machine with weights - lower boundary of CI.
    -   Keeps last 50 games for every machine, so he will adapt to change of winning machine.
-   Conservative player 🧱
    -   Collects winning history from every machine.
    -   Finds proportion of every event and takes lower boundary using Z test for proportions.
    -   Plays a machine until its adjusted expected value is less than 7.
-   Son of a casino designer 🤡
    -   Knows true distributions of winning and losing machines.
    -   Plays at least 10 times at every machine. Keep history of 100 games.
    -   Uses $\chi^2$ test for comparing current distribution of machine to the know distributions.
    -   Plays in a particular machine, until the machine is likely to be losing. Then moves to the next one on the right.

Winnings and probabilities

```{r, warning=FALSE}
#| echo: false
tibble(winning_sizes, w = winning_p_distr, l = losing_p_distr) |>
  mutate(winning_chance = round(1 / w)) |>
  mutate(losing_change = round(1 / l)) |>
  mutate(winning_machine = scales:::percent(w, accuracy = .1)) |>
  mutate(losing_machine = scales:::percent(l, accuracy = .1)) |>
  select(winning_sizes, winning_machine, winning_chance, losing_machine, losing_change) |>
  rename(`Winning` = winning_sizes) |>
  kable(format = "html", align = "c") |>
  kable_styling(full_width = FALSE, bootstrap_options = "striped") |>
  column_spec(3, border_right = T) |> 
  column_spec(1, border_right = T) 
```

## Strategies visualization

```{r, fig.asp=0.5, fig.width=8, warning=FALSE}
#| echo: false
plot_left_on_step(rewards_at_step)
```

```{r, fig.asp=0.5, fig.width=8, warning=FALSE}
#| echo: false
plot_bankrupcy(n_bankrupt_at_step)
```

```{r, fig.asp=0.5, fig.width=8}
#| echo: false
plot_hitting_target(position_hits_df)
```

```{r, fig.asp=0.5, fig.width=8}
#| echo: false
plot_machine_diversity(uniq_ind_data)
```

## Best strategy

Expected value from playing a game

```{r}
#| echo: false
profit_ci |>
  mutate_strategy() |>
  arrange(-mean) |>
  mutate(across(c(mean, lb, hb), ~ round(., 3))) |> 
  mutate(
    string_repr = str_c(
      mean,
      " [", lb,
      "; ", hb,
      "]"
      )
    ) |>
  select(strategy, mean, lb, hb, string_repr) |> 
  rename(lower_bound=lb, upper_bound=hb) |> 
  kable(format = "html", align = "c")
```

```{r, fig.asp=0.3, fig.width=8}
#| echo: false
plot_expected_profit(profit_ci)
```

## Conclusions

```{r cnt functions from bash}
#| include: false
cnt_function <- system("git grep -E 'function' ../R | wc -l", intern = T) |>
  as.integer()
```

1.  You will never win in a real casino
2.  Statistics is useful
3.  Simulations are fun and cheap
4.  Write as many functions as possible. I have `r cnt_function`, actually.
